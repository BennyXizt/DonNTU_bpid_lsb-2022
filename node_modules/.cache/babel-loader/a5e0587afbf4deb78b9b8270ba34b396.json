{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/shifr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [img, setImg] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n  const styles = {\n    hidden: {\n      display: \"none\"\n    },\n    visible: {\n      display: \"block\"\n    }\n  };\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(styles.hidden);\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\") encrypt();\n  }\n\n  function changeDegree(e) {\n    if (e.target.value.match(/[0-9]/i) && e.target.value.length < 2) setDegree(e.target.value);\n  }\n\n  function encrypt() {\n    if (typeOfEncrypt) {\n      console.log(true);\n    } else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n\n      reader.onload = () => {\n        setResultData(`0) Изначальный текст\\n${reader.result}`);\n        const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        let encrypted = CryptoJS.AES.encrypt(reader.result, key, {\n          iv: iv\n        });\n        setResultData(prev => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n        const hash = CryptoJS.SHA256(encrypted);\n        setResultData(prev => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n        setResultData(prev => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${reader.result}`);\n        encrypted = CryptoJS.AES.encrypt(`${hash}\\n${reader.result}`, key, {\n          iv: iv\n        });\n        setResultData(prev => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n        let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n          iv: iv\n        }).toString(CryptoJS.enc.Utf8);\n        setResultData(prev => `${prev}\\n\\n7) Decrypted\\n${decrypted}`);\n        const message = decrypted.slice(hash.toString().length);\n        const messageEncrypt = CryptoJS.AES.encrypt(message, key, {\n          iv: iv\n        });\n        const hash2 = CryptoJS.SHA256(messageEncrypt);\n        setResultData(prev => `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n            \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n            \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`);\n      };\n    }\n  }\n\n  function readImage(e) {\n    // setImg(e.target.files[0].name)\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(e.target.files[0]);\n\n    reader.onload = () => {\n      let u8 = new Uint8Array(reader.result);\n      let data = arrayBufferToBase64(u8);\n      console.log(data);\n    };\n  }\n\n  function arrayBufferToBase64(data) {\n    let result = \"\";\n    let i = 0,\n        c = 0,\n        c1 = 0,\n        c2 = 0,\n        c3 = 0;\n\n    if (data.length >= 3 && data[0] === 0xef && data[1] === 0xbb && data[2] === 0xbf) {\n      i = 3;\n    }\n\n    while (i < data.length) {\n      c = data[i];\n\n      if (c < 128) {\n        result += String.fromCharCode(c);\n        i++;\n      } else if (c > 191 && c < 224) {\n        c2 = data[i + 1];\n        result += String.fromCharCode((c & 31) << 6 | c2 & 63);\n        i += 2;\n      } else {\n        c2 = data[i + 1];\n        c3 = data[i + 2];\n        result = String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n        i += 3;\n      }\n    }\n\n    return result;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Laba 6 - image encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Choose img: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image\",\n          type: \"file\",\n          accept: \".jpeg,.jpg\",\n          onChange: readImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"degree\",\n          children: \"Choose degree: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"degree\",\n          type: \"text\",\n          value: degree,\n          onChange: changeDegree\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Read from File\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"read\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Write Data\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"write\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          style: chooseTypeStyleRead,\n          ref: inputFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: chooseTypeStyleWrite,\n          value: writeData,\n          onChange: e => setWriteData(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: imageEncrypt,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        alt: \"No img set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"resultData\",\n      value: resultData,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"E2y8nyfW4M5R4AYs9Wnk+JEENuI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/shifr/src/App.js"],"names":["React","useState","useRef","CryptoJS","App","img","setImg","typeOfEncrypt","setTypeOfEncrypt","styles","hidden","display","visible","chooseTypeStyleRead","setChooseTypeStyleRead","chooseTypeStyleWrite","setChooseTypeStyleWrite","writeData","setWriteData","resultData","setResultData","degree","setDegree","inputFile","radioButtonChanged","e","target","value","imageEncrypt","preventDefault","encrypt","changeDegree","match","length","console","log","current","file","files","reader","FileReader","readAsText","onload","result","key","enc","Utf8","parse","iv","encrypted","AES","prev","toString","hash","SHA256","decrypted","decrypt","message","slice","messageEncrypt","hash2","readImage","readAsArrayBuffer","u8","Uint8Array","data","arrayBufferToBase64","i","c","c1","c2","c3","String","fromCharCode"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [img, setImg] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n\n  const styles = {\n    hidden: {\n      display: \"none\",\n    },\n    visible: {\n      display: \"block\",\n    },\n  };\n\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(\n    styles.hidden\n  );\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\")\n  const inputFile = useRef(null);\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\") encrypt();\n  }\n  function changeDegree(e) {\n   if(e.target.value.match(/[0-9]/i) && e.target.value.length < 2)\n    setDegree(e.target.value)\n  }\n  function encrypt() {\n    if (typeOfEncrypt) {\n      console.log(true);\n    } else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n      reader.onload = () => {\n        setResultData(`0) Изначальный текст\\n${reader.result}`);\n        const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        let encrypted = CryptoJS.AES.encrypt(reader.result, key, { iv: iv });\n        setResultData((prev) => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n        const hash = CryptoJS.SHA256(encrypted);\n        setResultData((prev) => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n        setResultData(\n          (prev) =>\n            `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${reader.result}`\n        );\n        encrypted = CryptoJS.AES.encrypt(`${hash}\\n${reader.result}`, key, {\n          iv: iv,\n        });\n        setResultData((prev) => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n        let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n          iv: iv,\n        }).toString(CryptoJS.enc.Utf8);\n        setResultData((prev) => `${prev}\\n\\n7) Decrypted\\n${decrypted}`);\n        const message = decrypted.slice(hash.toString().length);\n        const messageEncrypt = CryptoJS.AES.encrypt(message, key, { iv: iv });\n        const hash2 = CryptoJS.SHA256(messageEncrypt);\n        setResultData(\n          (prev) =>\n            `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n            \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n            \\nПроверка на совпадение: ${\n              hash.toString() === hash2.toString()\n            }`\n        );\n      };\n    }\n  }\n  function readImage(e) {\n    // setImg(e.target.files[0].name)\n\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(e.target.files[0]);\n\n    reader.onload = () => {\n      let u8 = new Uint8Array(reader.result);\n      let data = arrayBufferToBase64(u8);\n      console.log(data);\n    };\n  }\n  function arrayBufferToBase64(data) {\n    let result = \"\";\n    let i = 0,\n      c = 0,\n      c1 = 0,\n      c2 = 0,\n      c3 = 0;\n    if (\n      data.length >= 3 &&\n      data[0] === 0xef &&\n      data[1] === 0xbb &&\n      data[2] === 0xbf\n    ) {\n      i = 3;\n    }\n    while (i < data.length) {\n      c = data[i];\n      if (c < 128) {\n        result += String.fromCharCode(c);\n        i++;\n      } else if (c > 191 && c < 224) {\n        c2 = data[i + 1];\n        result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n        i += 2;\n      } else {\n        c2 = data[i + 1];\n        c3 = data[i + 2];\n        result = String.fromCharCode(\n          ((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n        );\n        i += 3;\n      }\n    }\n    return result;\n  }\n  return (\n    <section className=\"wrapper\">\n      <h1>Laba 6 - image encrypt</h1>\n      <header>\n        <form>\n          <label htmlFor=\"image\">Choose img: </label>\n          <input\n            id=\"image\"\n            type=\"file\"\n            accept=\".jpeg,.jpg\"\n            onChange={readImage}\n          ></input>\n          <br />\n          <label htmlFor=\"degree\">Choose degree: </label>\n          <input id=\"degree\" type=\"text\" value={degree} onChange={changeDegree}/>\n          <p>Choose type</p>\n          <p>\n            <label>\n              Read from File{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"read\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n            <label>\n              Write Data{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"write\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n          </p>\n          <input\n            type=\"file\"\n            accept=\".txt\"\n            style={chooseTypeStyleRead}\n            ref={inputFile}\n          />\n          <textarea\n            style={chooseTypeStyleWrite}\n            value={writeData}\n            onChange={(e) => setWriteData(e.target.value)}\n          ></textarea>\n          <button onClick={imageEncrypt}>Submit</button>\n        </form>\n        <img src={img} alt=\"No img set\"></img>\n      </header>\n      <textarea className=\"resultData\" value={resultData} readOnly />\n    </section>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}