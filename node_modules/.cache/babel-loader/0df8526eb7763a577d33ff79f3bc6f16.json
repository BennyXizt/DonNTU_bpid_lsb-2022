{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/shifr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [img, setImg] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n  const styles = {\n    hidden: {\n      display: \"none\"\n    },\n    visible: {\n      display: \"block\"\n    }\n  };\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(styles.hidden);\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const inputFile = useRef(null);\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\") encrypt();\n  }\n\n  function encrypt() {\n    if (typeOfEncrypt) {\n      console.log(true);\n    } else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n\n      reader.onload = () => {\n        setResultData(`0) Original Text\\n${reader.result}`);\n        const key = CryptoJS.enc.Hex.parse(\"aaaa\");\n        const iv = CryptoJS.enc.Hex.parse(\"aaaa\");\n        let encrypted = CryptoJS.AES.encrypt(reader.result, key, {\n          iv: iv\n        });\n        setResultData(prev => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n        const hash = CryptoJS.SHA256(encrypted);\n        setResultData(prev => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n        setResultData(prev => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${reader.result}`);\n        encrypted = CryptoJS.AES.encrypt(`${hash}\\n${reader.result}`, key, {\n          iv: iv\n        });\n        setResultData(prev => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n      };\n    }\n  }\n\n  function readImage(e) {\n    setImg(e.target.files[0].name);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Laba 6 - image encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Choose img: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image\",\n          type: \"file\",\n          accept: \".jpeg,.jpg\",\n          onChange: readImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Read from File\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"read\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Write Data\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"write\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          style: chooseTypeStyleRead,\n          ref: inputFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: chooseTypeStyleWrite,\n          value: writeData,\n          onChange: e => setWriteData(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: imageEncrypt,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        alt: \"No img set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"resultData\",\n      value: resultData,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AD5Rcf1Jzu4/9PhhYxPHstno59A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/shifr/src/App.js"],"names":["React","useState","useRef","CryptoJS","App","img","setImg","typeOfEncrypt","setTypeOfEncrypt","styles","hidden","display","visible","chooseTypeStyleRead","setChooseTypeStyleRead","chooseTypeStyleWrite","setChooseTypeStyleWrite","writeData","setWriteData","resultData","setResultData","inputFile","radioButtonChanged","e","target","value","imageEncrypt","preventDefault","encrypt","console","log","current","file","files","reader","FileReader","readAsText","onload","result","key","enc","Hex","parse","iv","encrypted","AES","prev","toString","hash","SHA256","readImage","name"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\"\nimport \"./App.css\";\n\nfunction App() {\n  const [img, setImg] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n\n  const styles = {\n    hidden: {\n      display: \"none\",\n    },\n    visible: {\n      display: \"block\",\n    },\n  };\n\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(\n    styles.hidden\n  );\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\")\n  const inputFile = useRef(null);\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\") encrypt();\n  }\n  function encrypt() {\n    if (typeOfEncrypt) {\n      console.log(true);\n    } else if (inputFile.current) {\n      const file = inputFile.current.files[0]\n      const reader = new FileReader()\n      reader.readAsText(file)\n      reader.onload = () => {\n        setResultData(`0) Original Text\\n${reader.result}`)\n        const key  = CryptoJS.enc.Hex.parse(\"aaaa\")\n        const iv = CryptoJS.enc.Hex.parse(\"aaaa\")\n        let encrypted = CryptoJS.AES.encrypt(reader.result, key, { iv: iv})\n        setResultData(prev => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`)\n        const hash = CryptoJS.SHA256(encrypted)\n        setResultData(prev => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`)\n        setResultData(prev => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${reader.result}`)\n        encrypted = CryptoJS.AES.encrypt(`${hash}\\n${reader.result}`, key, { iv: iv})\n        setResultData(prev => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`)\n      }\n    }\n  }\n  function readImage(e) {\n    setImg(e.target.files[0].name)\n  }\n  return (\n    <section className=\"wrapper\">\n      <h1>Laba 6 - image encrypt</h1>\n      <header>\n        <form>\n          <label htmlFor=\"image\">Choose img: </label>\n          <input\n            id=\"image\"\n            type=\"file\"\n            accept=\".jpeg,.jpg\"\n            onChange={readImage}\n          ></input>\n          <p>Choose type</p>\n          <p>\n            <label>\n              Read from File{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"read\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n            <label>\n              Write Data{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"write\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n          </p>\n          <input\n            type=\"file\"\n            accept=\".txt\"\n            style={chooseTypeStyleRead}\n            ref={inputFile}\n          />\n          <textarea\n            style={chooseTypeStyleWrite}\n            value={writeData}\n            onChange={(e) => setWriteData(e.target.value)}\n          ></textarea>\n          <button onClick={imageEncrypt}>Submit</button>\n        </form>\n        <img src={img} alt=\"No img set\"></img>\n      </header>\n      <textarea className=\"resultData\" value={resultData} readOnly/>\n    </section>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}