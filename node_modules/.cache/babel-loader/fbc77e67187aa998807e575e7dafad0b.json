{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/shifr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [imageSource, setImageSource] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n  const styles = {\n    hidden: {\n      display: \"none\"\n    },\n    visible: {\n      display: \"block\"\n    }\n  };\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(styles.hidden);\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n  const inputImage = useRef(null);\n  const canvasRef = useRef(null);\n  const [text, setText] = useState(\"\");\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\") encrypt();\n  }\n\n  function changeDegree(e) {\n    if (e.target.value.length < 2 && (e.target.value === \"\" || e.target.value > 0) && e.target.value % 2 === 0) setDegree(e.target.value);\n  }\n\n  useEffect(() => {\n    if (text) {\n      setResultData(`0) Изначальный текст\\n${text}`);\n      const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      let encrypted = CryptoJS.AES.encrypt(text, key, {\n        iv: iv\n      });\n      setResultData(prev => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n      const hash = CryptoJS.SHA256(encrypted);\n      setResultData(prev => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n      setResultData(prev => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${text}`);\n      encrypted = CryptoJS.AES.encrypt(`${hash}\\n${text}`, key, {\n        iv: iv\n      });\n      setResultData(prev => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n      secretImage();\n      setResultData(prev => `${prev}\\n\\n5) Поместить зашифрованный файл в BMP-контейнер по алгоритму LSB`);\n      let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n        iv: iv\n      }).toString(CryptoJS.enc.Utf8);\n      setResultData(prev => `${prev}\\n\\n7) Decrypted\\n${decrypted}`);\n      const message = decrypted.slice(hash.toString().length);\n      const messageEncrypt = CryptoJS.AES.encrypt(message, key, {\n        iv: iv\n      });\n      const hash2 = CryptoJS.SHA256(messageEncrypt);\n      setResultData(prev => `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n        \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n        \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`);\n    }\n  }, [text]);\n\n  function encrypt() {\n    if (typeOfEncrypt) setText(writeData);else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n\n      reader.onload = () => {\n        setText(reader.result);\n      };\n    }\n  }\n\n  useEffect(() => {\n    const image = inputImage.current;\n\n    image.onload = () => {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, 0, 0);\n      ctx.fillText(\"asfsaf\", 210, 10);\n      console.log(image);\n    };\n  }, [inputImage.current]);\n\n  function secretImage() {\n    const file = inputImage.current.files[0];\n    const reader = new FileReader();\n    const textByte = encodeURI(text).split(/%..|./).length - 1;\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = () => {\n      const iBuffer = reader.result;\n\n      if (textByte >= iBuffer.byteLength * degree / 8 - 54) {\n        alert(\"Ошибка. Длина текста превышает вместимость контейнера\");\n        return;\n      }\n\n      let u8 = new Uint8ClampedArray(iBuffer);\n      console.log(u8);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Laba 6 - image encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Choose img: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image\",\n          type: \"file\",\n          accept: \".jpeg,.jpg,.bmp\",\n          onChange: e => setImageSource(e.target.files[0].name),\n          ref: inputImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"degree\",\n          children: \"Choose degree: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"degree\",\n          type: \"text\",\n          value: degree,\n          onChange: changeDegree\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Read from File\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"read\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Write Data\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"write\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          style: chooseTypeStyleRead,\n          ref: inputFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: chooseTypeStyleWrite,\n          value: writeData,\n          onChange: e => setWriteData(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: imageEncrypt,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageSource,\n        alt: \"No img set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"resultData\",\n      value: resultData,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"BZ5FBkwjYpqQcWN40pwYUzJYlrY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/shifr/src/App.js"],"names":["React","useState","useRef","useEffect","CryptoJS","App","imageSource","setImageSource","typeOfEncrypt","setTypeOfEncrypt","styles","hidden","display","visible","chooseTypeStyleRead","setChooseTypeStyleRead","chooseTypeStyleWrite","setChooseTypeStyleWrite","writeData","setWriteData","resultData","setResultData","degree","setDegree","inputFile","inputImage","canvasRef","text","setText","radioButtonChanged","e","target","value","imageEncrypt","preventDefault","encrypt","changeDegree","length","key","enc","Utf8","parse","iv","encrypted","AES","prev","toString","hash","SHA256","secretImage","decrypted","decrypt","message","slice","messageEncrypt","hash2","current","file","files","reader","FileReader","readAsText","onload","result","image","canvas","ctx","getContext","drawImage","fillText","console","log","textByte","encodeURI","split","readAsArrayBuffer","iBuffer","byteLength","alert","u8","Uint8ClampedArray","name"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [imageSource, setImageSource] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n\n  const styles = {\n    hidden: {\n      display: \"none\",\n    },\n    visible: {\n      display: \"block\",\n    },\n  };\n\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(\n    styles.hidden\n  );\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n  const inputImage = useRef(null);\n  const canvasRef = useRef(null);\n  const [text, setText] = useState(\"\");\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\") encrypt();\n  }\n  function changeDegree(e) {\n    if (\n      e.target.value.length < 2 &&\n      (e.target.value === \"\" || e.target.value > 0) &&\n      e.target.value % 2 === 0\n    )\n      setDegree(e.target.value);\n  }\n  useEffect(() => {\n    if (text) {\n      setResultData(`0) Изначальный текст\\n${text}`);\n      const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      let encrypted = CryptoJS.AES.encrypt(text, key, { iv: iv });\n      setResultData((prev) => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n      const hash = CryptoJS.SHA256(encrypted);\n      setResultData((prev) => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n      setResultData(\n        (prev) => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${text}`\n      );\n      encrypted = CryptoJS.AES.encrypt(`${hash}\\n${text}`, key, {\n        iv: iv,\n      });\n      setResultData((prev) => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n      secretImage();\n      setResultData(\n        (prev) =>\n          `${prev}\\n\\n5) Поместить зашифрованный файл в BMP-контейнер по алгоритму LSB`\n      );\n      let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n        iv: iv,\n      }).toString(CryptoJS.enc.Utf8);\n      setResultData((prev) => `${prev}\\n\\n7) Decrypted\\n${decrypted}`);\n      const message = decrypted.slice(hash.toString().length);\n      const messageEncrypt = CryptoJS.AES.encrypt(message, key, { iv: iv });\n      const hash2 = CryptoJS.SHA256(messageEncrypt);\n      setResultData(\n        (prev) =>\n          `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n        \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n        \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`\n      );\n    }\n  }, [text]);\n  function encrypt() {\n    if (typeOfEncrypt) setText(writeData);\n    else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n      reader.onload = () => {\n        setText(reader.result);\n      };\n    }\n  }\n\n  useEffect(() => {\n    const image = inputImage.current;\n    image.onload = () => {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, 0, 0)\n      ctx.fillText(\"asfsaf\", 210, 10)\n      console.log(image);\n    };\n  }, [inputImage.current]);\n\n  function secretImage() {\n    const file = inputImage.current.files[0];\n    const reader = new FileReader();\n    const textByte = encodeURI(text).split(/%..|./).length - 1;\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = () => {\n      const iBuffer = reader.result;\n      if (textByte >= (iBuffer.byteLength * degree) / 8 - 54) {\n        alert(\"Ошибка. Длина текста превышает вместимость контейнера\");\n        return;\n      }\n      let u8 = new Uint8ClampedArray(iBuffer);\n      console.log(u8);\n    };\n  }\n  return (\n    <section className=\"wrapper\">\n      <canvas ref={canvasRef}></canvas>\n      <h1>Laba 6 - image encrypt</h1>\n      <header>\n        <form>\n          <label htmlFor=\"image\">Choose img: </label>\n          <input\n            id=\"image\"\n            type=\"file\"\n            accept=\".jpeg,.jpg,.bmp\"\n            onChange={(e) => setImageSource(e.target.files[0].name)}\n            ref={inputImage}\n          ></input>\n          <br />\n          <label htmlFor=\"degree\">Choose degree: </label>\n          <input\n            id=\"degree\"\n            type=\"text\"\n            value={degree}\n            onChange={changeDegree}\n          />\n          <p>Choose type</p>\n          <p>\n            <label>\n              Read from File{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"read\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n            <label>\n              Write Data{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"write\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n          </p>\n          <input\n            type=\"file\"\n            accept=\".txt\"\n            style={chooseTypeStyleRead}\n            ref={inputFile}\n          />\n          <textarea\n            style={chooseTypeStyleWrite}\n            value={writeData}\n            onChange={(e) => setWriteData(e.target.value)}\n          ></textarea>\n          <button onClick={imageEncrypt}>Submit</button>\n        </form>\n        <img src={imageSource} alt=\"No img set\"></img>\n      </header>\n      <textarea className=\"resultData\" value={resultData} readOnly />\n    </section>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}