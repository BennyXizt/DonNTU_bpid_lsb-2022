{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/shifr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [img, setImg] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n  const styles = {\n    hidden: {\n      display: \"none\"\n    },\n    visible: {\n      display: \"block\"\n    }\n  };\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(styles.hidden);\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n  const inputImage = useRef(null);\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\") encrypt();\n  }\n\n  function changeDegree(e) {\n    if (e.target.value.length < 2 && (e.target.value === \"\" || e.target.value > 0) && e.target.value % 2 === 0) setDegree(e.target.value);\n  }\n\n  function encrypt() {\n    if (typeOfEncrypt) {\n      console.log(true);\n    } else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n\n      reader.onload = () => {\n        setResultData(`0) Изначальный текст\\n${reader.result}`);\n        const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        let encrypted = CryptoJS.AES.encrypt(reader.result, key, {\n          iv: iv\n        });\n        setResultData(prev => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n        const hash = CryptoJS.SHA256(encrypted);\n        setResultData(prev => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n        setResultData(prev => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${reader.result}`);\n        encrypted = CryptoJS.AES.encrypt(`${hash}\\n${reader.result}`, key, {\n          iv: iv\n        });\n        setResultData(prev => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n        secretImage();\n        setResultData(prev => `${prev}\\n\\n5) Поместить зашифрованный файл в BMP-контейнер по алгоритму LSB`);\n        let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n          iv: iv\n        }).toString(CryptoJS.enc.Utf8);\n        setResultData(prev => `${prev}\\n\\n7) Decrypted\\n${decrypted}`);\n        const message = decrypted.slice(hash.toString().length);\n        const messageEncrypt = CryptoJS.AES.encrypt(message, key, {\n          iv: iv\n        });\n        const hash2 = CryptoJS.SHA256(messageEncrypt);\n        setResultData(prev => `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n            \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n            \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`);\n      };\n    }\n  }\n\n  function secretImage() {\n    const file = inputImage.current.files[0];\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = () => {\n      const image = reader.result;\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Laba 6 - image encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Choose img: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image\",\n          type: \"file\",\n          accept: \".jpeg,.jpg,.bmp\",\n          onChange: e => setImg(e.target.files[0].name),\n          ref: inputImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"degree\",\n          children: \"Choose degree: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"degree\",\n          type: \"text\",\n          value: degree,\n          onChange: changeDegree\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Read from File\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"read\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Write Data\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"write\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          style: chooseTypeStyleRead,\n          ref: inputFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: chooseTypeStyleWrite,\n          value: writeData,\n          onChange: e => setWriteData(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: imageEncrypt,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        alt: \"No img set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"resultData\",\n      value: resultData,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"K4KcNQU7ued+chdvZxQXMSguRkM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/shifr/src/App.js"],"names":["React","useState","useRef","CryptoJS","App","img","setImg","typeOfEncrypt","setTypeOfEncrypt","styles","hidden","display","visible","chooseTypeStyleRead","setChooseTypeStyleRead","chooseTypeStyleWrite","setChooseTypeStyleWrite","writeData","setWriteData","resultData","setResultData","degree","setDegree","inputFile","inputImage","radioButtonChanged","e","target","value","imageEncrypt","preventDefault","encrypt","changeDegree","length","console","log","current","file","files","reader","FileReader","readAsText","onload","result","key","enc","Utf8","parse","iv","encrypted","AES","prev","toString","hash","SHA256","secretImage","decrypted","decrypt","message","slice","messageEncrypt","hash2","readAsArrayBuffer","image","name"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [img, setImg] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n\n  const styles = {\n    hidden: {\n      display: \"none\",\n    },\n    visible: {\n      display: \"block\",\n    },\n  };\n\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(\n    styles.hidden\n  );\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n  const inputImage = useRef(null)\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\") encrypt();\n  }\n  function changeDegree(e) {\n    if (\n      e.target.value.length < 2 &&\n      (e.target.value === \"\" || e.target.value > 0) &&\n      e.target.value % 2 === 0\n    )\n      setDegree(e.target.value);\n  }\n  function encrypt() {\n    if (typeOfEncrypt) {\n      console.log(true);\n    } else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n      reader.onload = () => {\n        setResultData(`0) Изначальный текст\\n${reader.result}`);\n        const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n        let encrypted = CryptoJS.AES.encrypt(reader.result, key, { iv: iv });\n        setResultData((prev) => `${prev}\\n\\n1) AES\\n${encrypted.toString()}`);\n        const hash = CryptoJS.SHA256(encrypted);\n        setResultData((prev) => `${prev}\\n\\n2) Hash via SHA2\\n${hash}`);\n        setResultData(\n          (prev) =>\n            `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${reader.result}`\n        );\n        encrypted = CryptoJS.AES.encrypt(`${hash}\\n${reader.result}`, key, {\n          iv: iv,\n        });\n        setResultData((prev) => `${prev}\\n\\n4) AES\\n${encrypted.toString()}`);\n        secretImage()\n\n\n        setResultData((prev) => `${prev}\\n\\n5) Поместить зашифрованный файл в BMP-контейнер по алгоритму LSB`);\n        let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n          iv: iv,\n        }).toString(CryptoJS.enc.Utf8);\n        setResultData((prev) => `${prev}\\n\\n7) Decrypted\\n${decrypted}`);\n        const message = decrypted.slice(hash.toString().length);\n        const messageEncrypt = CryptoJS.AES.encrypt(message, key, { iv: iv }) \n        const hash2 = CryptoJS.SHA256(messageEncrypt);\n        setResultData(\n          (prev) =>\n            `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n            \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n            \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`\n        );\n      };\n    }\n  }\n  function secretImage() {\n    const file = inputImage.current.files[0]\n    const reader = new FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onload = () => {\n      const image = reader.result\n    }\n  }\n  return (\n    <section className=\"wrapper\">\n      <h1>Laba 6 - image encrypt</h1>\n      <header>\n        <form>\n          <label htmlFor=\"image\">Choose img: </label>\n          <input\n            id=\"image\"\n            type=\"file\"\n            accept=\".jpeg,.jpg,.bmp\"\n            onChange={e => setImg(e.target.files[0].name)}\n            ref={inputImage}\n          ></input>\n          <br />\n          <label htmlFor=\"degree\">Choose degree: </label>\n          <input\n            id=\"degree\"\n            type=\"text\"\n            value={degree}\n            onChange={changeDegree}\n          />\n          <p>Choose type</p>\n          <p>\n            <label>\n              Read from File{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"read\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n            <label>\n              Write Data{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"write\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n          </p>\n          <input\n            type=\"file\"\n            accept=\".txt\"\n            style={chooseTypeStyleRead}\n            ref={inputFile}\n          />\n          <textarea\n            style={chooseTypeStyleWrite}\n            value={writeData}\n            onChange={(e) => setWriteData(e.target.value)}\n          ></textarea>\n          <button onClick={imageEncrypt}>Submit</button>\n        </form>\n        <img src={img} alt=\"No img set\"></img>\n      </header>\n      <textarea className=\"resultData\" value={resultData} readOnly />\n    </section>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}