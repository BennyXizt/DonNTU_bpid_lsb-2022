{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/shifr/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [imageSource, setImageSource] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n  const styles = {\n    hidden: {\n      display: \"none\"\n    },\n    visible: {\n      display: \"block\"\n    }\n  };\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(styles.hidden);\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n  const inputImage = useRef(null);\n  const canvasRef = useRef(null);\n  const [text, setText] = useState(\"\");\n  const refImage = useRef(null);\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\" && imageSource !== \"\") encrypt();\n  }\n\n  function changeDegree(e) {\n    if (e.target.value.length < 2 && (e.target.value === \"\" || e.target.value > 0) && e.target.value % 2 === 0) setDegree(e.target.value);\n  }\n\n  useEffect(() => {\n    if (text) {\n      setResultData(`0) Изначальный текст\\n${text}`);\n      const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      let encrypted = CryptoJS.AES.encrypt(text, key, {\n        iv: iv\n      });\n      setResultData(prev => `${prev}\\n\\n1) Считывание файла симметричным алгоритмом AES\\n${encrypted.toString()}`);\n      const hash = CryptoJS.SHA256(encrypted);\n      setResultData(prev => `${prev}\\n\\n2) Получаем hash с использованием SHA2\\n${hash}`);\n      setResultData(prev => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${text}`);\n      encrypted = CryptoJS.AES.encrypt(`${hash}\\n${text}`, key, {\n        iv: iv\n      });\n      setResultData(prev => `${prev}\\n\\n4) Шифруем файл симметричным алгоритмом AES\\n${encrypted.toString()}`);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      let clampedArray = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      console.log(\"Изначальный контейнер\");\n      console.log(clampedArray);\n      let u8 = clampedArray.data.map(e => {\n        const first2bit = e & 0x03;\n        const first4bitMiddle = (e & 0x0C) >> 2;\n        const first6bitMiddle = (e & 0x30) >> 4;\n        const first8bitMiddle = (e & 0xC0) >> 6;\n        e = e & 0xFC | first2bit;\n        e = e & 0xFC | first4bitMiddle;\n        e = e & 0xFC | first6bitMiddle;\n        e = e & 0xFC | first8bitMiddle;\n        return e;\n      });\n      let imageData = new ImageData(u8, clampedArray.width, clampedArray.height);\n      console.log(\"Новый контейнер\");\n      console.log(imageData);\n      ctx.putImageData(imageData, 0, 0);\n      setResultData(prev => `${prev}\\n\\n5) Поместить зашифрованный файл в BMP-контейнер по алгоритму LSB\n          \\n${degree} последних бита обнулено и занесено новое значение\n          \\nГотово(смотреть console.log)`);\n      let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n        iv: iv\n      }).toString(CryptoJS.enc.Utf8);\n      setResultData(prev => `${prev}\\n\\n6) Извлечь данные из BMP-контейнера\\n${encrypted.toString()}`);\n      setResultData(prev => `${prev}\\n\\n7) Расшифровуем с использованием ключа симметричного алгоритма\\n${decrypted}`);\n      const message = decrypted.slice(hash.toString().length);\n      const messageEncrypt = CryptoJS.AES.encrypt(message, key, {\n        iv: iv\n      });\n      const hash2 = CryptoJS.SHA256(messageEncrypt);\n      setResultData(prev => `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n        \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n        \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`);\n    }\n  }, [text]);\n\n  function encrypt() {\n    if (typeOfEncrypt) setText(writeData);else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n\n      reader.onload = () => {\n        setText(reader.result);\n      };\n    }\n  }\n\n  useEffect(() => {\n    const image = new Image();\n    image.src = imageSource;\n\n    image.onload = () => {\n      const canvas = canvasRef.current;\n      canvas.width = refImage.current.width;\n      canvas.height = refImage.current.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    };\n  }, [inputImage.current]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041B\\u0430\\u0431\\u043E\\u0440\\u0430\\u0442\\u043E\\u0440\\u043D\\u0430\\u044F \\u0440\\u0430\\u0431\\u043E\\u0442\\u0430 \\u21166 - LSB \\u0430\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image\",\n          type: \"file\",\n          accept: \".jpeg,.jpg,.bmp\",\n          onChange: e => setImageSource(e.target.files[0].name),\n          ref: inputImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"degree\",\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0441\\u0442\\u0435\\u043F\\u0435\\u043D\\u044C: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"degree\",\n          type: \"text\",\n          value: degree,\n          onChange: changeDegree,\n          placeholder: \"2, 4, 6, 8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"\\u0428\\u0438\\u0444\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0438\\u0437 \\u0444\\u0430\\u0439\\u043B\\u0430\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"read\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"\\u0428\\u0438\\u0444\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043D\\u043D\\u043E\\u0433\\u043E \\u0442\\u0435\\u043A\\u0441\\u0442\\u0430\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"checkbox\",\n              value: \"write\",\n              onChange: radioButtonChanged\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          style: chooseTypeStyleRead,\n          ref: inputFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: chooseTypeStyleWrite,\n          value: writeData,\n          onChange: e => setWriteData(e.target.value),\n          placeholder: \"\\u041D\\u0430\\u0447\\u043D\\u0438\\u0442\\u0435 \\u0432\\u0432\\u043E\\u0434\\u0438\\u0442\\u044C \\u0442\\u0435\\u043A\\u0441\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: imageEncrypt,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        ref: refImage,\n        src: imageSource,\n        alt: \"No img set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"resultData\",\n      value: resultData,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YTcdTWaHcGLUSU/iLN9rsZjOlfE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/shifr/src/App.js"],"names":["React","useState","useRef","useEffect","CryptoJS","App","imageSource","setImageSource","typeOfEncrypt","setTypeOfEncrypt","styles","hidden","display","visible","chooseTypeStyleRead","setChooseTypeStyleRead","chooseTypeStyleWrite","setChooseTypeStyleWrite","writeData","setWriteData","resultData","setResultData","degree","setDegree","inputFile","inputImage","canvasRef","text","setText","refImage","radioButtonChanged","e","target","value","imageEncrypt","preventDefault","encrypt","changeDegree","length","key","enc","Utf8","parse","iv","encrypted","AES","prev","toString","hash","SHA256","canvas","current","ctx","getContext","clampedArray","getImageData","width","height","console","log","u8","data","map","first2bit","first4bitMiddle","first6bitMiddle","first8bitMiddle","imageData","ImageData","putImageData","decrypted","decrypt","message","slice","messageEncrypt","hash2","file","files","reader","FileReader","readAsText","onload","result","image","Image","src","drawImage","name"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [imageSource, setImageSource] = useState(\"\");\n  const [typeOfEncrypt, setTypeOfEncrypt] = useState(\"\");\n\n  const styles = {\n    hidden: {\n      display: \"none\",\n    },\n    visible: {\n      display: \"block\",\n    },\n  };\n\n  const [chooseTypeStyleRead, setChooseTypeStyleRead] = useState(styles.hidden);\n  const [chooseTypeStyleWrite, setChooseTypeStyleWrite] = useState(\n    styles.hidden\n  );\n  const [writeData, setWriteData] = useState(\"\");\n  const [resultData, setResultData] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const inputFile = useRef(null);\n  const inputImage = useRef(null);\n  const canvasRef = useRef(null);\n  const [text, setText] = useState(\"\");\n  const refImage = useRef(null)\n\n  function radioButtonChanged(e) {\n    if (e.target.value === \"read\") {\n      setChooseTypeStyleRead(styles.visible);\n      setChooseTypeStyleWrite(styles.hidden);\n      setTypeOfEncrypt(0);\n    } else {\n      setChooseTypeStyleRead(styles.hidden);\n      setChooseTypeStyleWrite(styles.visible);\n      setTypeOfEncrypt(1);\n    }\n  }\n  function imageEncrypt(e) {\n    e.preventDefault();\n    if (typeOfEncrypt !== \"\" && degree !== \"\" && imageSource !== \"\") encrypt();\n  }\n  function changeDegree(e) {\n    if (\n      e.target.value.length < 2 &&\n      (e.target.value === \"\" || e.target.value > 0) &&\n      e.target.value % 2 === 0\n    )\n      setDegree(e.target.value);\n  }\n  useEffect(() => {\n    if (text) {\n      setResultData(`0) Изначальный текст\\n${text}`);\n      const key = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      const iv = CryptoJS.enc.Utf8.parse(\"aaaa\");\n      let encrypted = CryptoJS.AES.encrypt(text, key, { iv: iv });\n      setResultData((prev) => `${prev}\\n\\n1) Считывание файла симметричным алгоритмом AES\\n${encrypted.toString()}`);\n      const hash = CryptoJS.SHA256(encrypted);\n      setResultData((prev) => `${prev}\\n\\n2) Получаем hash с использованием SHA2\\n${hash}`);\n      setResultData(\n        (prev) => `${prev}\\n\\n3) Hash добавлен к файлу\\n${hash}\\n${text}`\n      );\n      encrypted = CryptoJS.AES.encrypt(`${hash}\\n${text}`, key, {\n        iv: iv,\n      });\n      setResultData((prev) => `${prev}\\n\\n4) Шифруем файл симметричным алгоритмом AES\\n${encrypted.toString()}`);\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\");\n      let clampedArray = ctx.getImageData(0, 0, canvas.width, canvas.height)\n      console.log(\"Изначальный контейнер\")\n      console.log(clampedArray)\n      let u8 = clampedArray.data.map(e => {\n        const first2bit = e & 0x03\n        const first4bitMiddle = (e & 0x0C) >> 2\n        const first6bitMiddle = (e & 0x30) >> 4\n        const first8bitMiddle = (e & 0xC0) >> 6\n\n        e = (e & 0xFC) | first2bit\n        e = (e & 0xFC) | first4bitMiddle\n        e = (e & 0xFC) | first6bitMiddle\n        e = (e & 0xFC) | first8bitMiddle\n        return e\n      });\n      let imageData = new ImageData(u8, clampedArray.width, clampedArray.height)\n      console.log(\"Новый контейнер\")\n      console.log(imageData)\n      ctx.putImageData(imageData, 0, 0)\n      setResultData(\n        (prev) =>\n          `${prev}\\n\\n5) Поместить зашифрованный файл в BMP-контейнер по алгоритму LSB\n          \\n${degree} последних бита обнулено и занесено новое значение\n          \\nГотово(смотреть console.log)`\n      );\n      let decrypted = CryptoJS.AES.decrypt(encrypted.toString(), key, {\n        iv: iv,\n      }).toString(CryptoJS.enc.Utf8);\n      setResultData((prev) => `${prev}\\n\\n6) Извлечь данные из BMP-контейнера\\n${encrypted.toString()}`);\n      setResultData((prev) => `${prev}\\n\\n7) Расшифровуем с использованием ключа симметричного алгоритма\\n${decrypted}`);\n      const message = decrypted.slice(hash.toString().length);\n      const messageEncrypt = CryptoJS.AES.encrypt(message, key, { iv: iv });\n      const hash2 = CryptoJS.SHA256(messageEncrypt);\n      setResultData(\n        (prev) =>\n          `${prev}\\n\\n8) Целостность данных\\nЦифровой ключ изначального текста равен: ${hash.toString()}\n        \\nЦифровой ключ полученного текста равен: ${hash2.toString()}\n        \\nПроверка на совпадение: ${hash.toString() === hash2.toString()}`\n      );\n    }\n  }, [text]);\n  function encrypt() {\n    if (typeOfEncrypt) setText(writeData);\n    else if (inputFile.current) {\n      const file = inputFile.current.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file);\n      reader.onload = () => {\n        setText(reader.result);\n      };\n    }\n  }\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageSource\n    \n    image.onload = () => {\n      const canvas = canvasRef.current;\n      canvas.width = refImage.current.width\n      canvas.height = refImage.current.height\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height)\n    };\n  }, [inputImage.current]);\n\n  return (\n    <section className=\"wrapper\">\n      <canvas ref={canvasRef}></canvas>\n      <h1>Лабораторная работа №6 - LSB алгоритм</h1>\n      <header>\n        <form>\n          <label htmlFor=\"image\">Выберите изображение: </label>\n          <input\n            id=\"image\"\n            type=\"file\"\n            accept=\".jpeg,.jpg,.bmp\"\n            onChange={(e) => setImageSource(e.target.files[0].name)}\n            ref={inputImage}\n          ></input>\n          <br />\n          <label htmlFor=\"degree\">Выберите степень: </label>\n          <input\n            id=\"degree\"\n            type=\"text\"\n            value={degree}\n            onChange={changeDegree}\n            placeholder=\"2, 4, 6, 8\"\n          />\n          <p>Выберите тип</p>\n          <p>\n            <label>\n              Шифрование данных из файла{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"read\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n            <label>\n              Шифрование написанного текста{\" \"}\n              <input\n                type=\"radio\"\n                name=\"checkbox\"\n                value=\"write\"\n                onChange={radioButtonChanged}\n              />\n            </label>\n          </p>\n          <input\n            type=\"file\"\n            accept=\".txt\"\n            style={chooseTypeStyleRead}\n            ref={inputFile}\n          />\n          <textarea\n            style={chooseTypeStyleWrite}\n            value={writeData}\n            onChange={(e) => setWriteData(e.target.value)}\n            placeholder=\"Начните вводить текст\"\n          ></textarea>\n          <button onClick={imageEncrypt}>Submit</button>\n        </form>\n        <img ref={refImage} src={imageSource} alt=\"No img set\"></img>\n      </header>\n      <textarea className=\"resultData\" value={resultData} readOnly />\n    </section>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}